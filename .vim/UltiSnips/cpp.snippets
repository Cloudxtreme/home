priority -50
extends c
# vim:ft=snippets:

############################################################
# head
snippet head "file head" b
// File:        `!v expand("%:t")`
// Description: ---
// Notes:       ---
// Author:      leoxiang <leoxiang727@qq.com>
// Revision:    `!v strftime("%Y-%m-%d")` by leoxiang

$0

// vim:ts=4:sw=4:et:ft=cpp:
endsnippet

############################################################
# fb
snippet fb "" b
{
	return true;
}
endsnippet

############################################################
# inc
snippet inc "" b
#include "$0"
endsnippet

############################################################
# //
snippet // "" b
////////////////////////////////////////////////////////////
// $0
endsnippet

############################################################
# beginend
snippet beginend "$1.begin(), $1.end()"
${1:v}begin(), $1end()
endsnippet

############################################################
# class
snippet class "class" b
class ${1:name} {
public:
	$1($2);
	virtual ~$1();

private:
	${0}
};
endsnippet

############################################################
# ns
snippet ns "namespace" b
namespace ${1:name} {
	${VISUAL}$0
} // end namespace $1
endsnippet

############################################################
# tp
snippet tp "template <typename ..>"
template <typename ${1:name}>
${0:class}
endsnippet

############################################################
# def
snippet def "#define ..."
#define ${1}
endsnippet

############################################################
# ifndef
snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

############################################################
# #if
snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

############################################################
# mark
snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

############################################################
# main
snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

############################################################
# for
snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

############################################################
# fori
snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

############################################################
# enum
snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

############################################################
# once
snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

############################################################
# td
snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

############################################################
# wh
snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

############################################################
# do
snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while(${1:/* condition */});
endsnippet

############################################################
# fprintf
snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

############################################################
# eli
snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

############################################################
# printf
snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

############################################################
# st
snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

############################################################
# fun
snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

############################################################
# fund
snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

